// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// TODO: may be able to remove these ???
#include <cstdio>
#include <cstring>

#include <@MODULE_NAME@.h>
#include <@MODULE_NAME@Log.h>
#include <ScopeGuard.h>
#include <Mmi.h>

void __attribute__((constructor)) InitModule()
{
    @MODULE_NAME@Log::OpenLog();
    OsConfigLogInfo(@MODULE_NAME@Log::Get(), "@MODULE_NAME@ module loaded");
}

void __attribute__((destructor)) DestroyModule()
{
    OsConfigLogInfo(@MODULE_NAME@Log::Get(), "@MODULE_NAME@ module unloaded");
    @MODULE_NAME@Log::CloseLog();
}

int MmiGetInfo(
    const char* clientName,
    MMI_JSON_STRING* payload,
    int* payloadSizeBytes)
{
    int status = MMI_OK;

    ScopeGuard sg{[&]()
    {
        if (MMI_OK == status)
        {
            if (IsFullLoggingEnabled())
            {
                OsConfigLogInfo(@MODULE_NAME@Log::Get(), "MmiGetInfo(%s, %.*s, %d) returned %d", clientName, *payloadSizeBytes, *payload, *payloadSizeBytes, status);
            }
            else
            {
                OsConfigLogInfo(@MODULE_NAME@Log::Get(), "MmiGetInfo(%s, -, %d) returned %d", clientName, *payloadSizeBytes, status);
            }
        }
        else
        {
            if (IsFullLoggingEnabled())
            {
                OsConfigLogError(@MODULE_NAME@Log::Get(), "MmiGetInfo(%s, %.*s, %d) returned %d", clientName, *payloadSizeBytes, *payload, *payloadSizeBytes, status);
            }
            else
            {
                OsConfigLogError(@MODULE_NAME@Log::Get(), "MmiGetInfo(%s, -, %d) returned %d", clientName, *payloadSizeBytes, status);
            }
        }
    }};

    // Get the static information from the @MODULE_NAME@ module
    try
    {
        status = @MODULE_NAME@::GetInfo(clientName, payload, payloadSizeBytes);
    }
    catch (const std::exception& e)
    {
        OsConfigLogError(@MODULE_NAME@Log::Get(), "MmiGetInfo(%s, %.*s, %d) failed with exception: %s", clientName, *payloadSizeBytes, *payload, *payloadSizeBytes, e.what());
        status = -1;
    }
    catch (...)
    {
        OsConfigLogError(@MODULE_NAME@Log::Get(), "MmiGetInfo(%s, %.*s, %d) failed with unknown exception", clientName, *payloadSizeBytes, *payload, *payloadSizeBytes);
        status = -1;
    }

    return status;
}

MMI_HANDLE MmiOpen(
    const char* clientName,
    const unsigned int maxPayloadSizeBytes)
{
    int status = MMI_OK;
    MMI_HANDLE handle = nullptr;

    ScopeGuard sg{[&]()
    {
        if (MMI_OK == status)
        {
            OsConfigLogInfo(@MODULE_NAME@Log::Get(), "MmiOpen(%s, %d) returned: %p, status: %d", clientName, maxPayloadSizeBytes, handle, status);
        }
        else
        {
            OsConfigLogError(@MODULE_NAME@Log::Get(), "MmiOpen(%s, %d) returned: %p, status: %d", clientName, maxPayloadSizeBytes, handle, status);
        }
    }};

    if (nullptr != clientName)
    {
        @MODULE_NAME@* commandRunner = new (std::nothrow) @MODULE_NAME@(clientName, maxPayloadSizeBytes);
        if (nullptr != commandRunner)
        {
            handle = reinterpret_cast<MMI_HANDLE>(commandRunner);
        }
        else
        {
            OsConfigLogError(@MODULE_NAME@Log::Get(), "MmiOpen failed to allocate memory");
            status = ENOMEM;
        }
    }
    else
    {
        OsConfigLogError(@MODULE_NAME@Log::Get(), "MmiOpen called with null clientName");
        status = EINVAL;
    }

    return handle;
}

void MmiClose(MMI_HANDLE clientSession)
{
    @MODULE_NAME@* commandRunner = reinterpret_cast<@MODULE_NAME@*>(clientSession);
    if (nullptr != commandRunner)
    {
        delete commandRunner;
    }
}

int MmiSet(
    MMI_HANDLE clientSession,
    const char* componentName,
    const char* objectName,
    const MMI_JSON_STRING payload,
    const int payloadSizeBytes)
{
    int status = MMI_OK;
    @MODULE_NAME@* session = nullptr;

    ScopeGuard sg{[&]()
    {
        if (MMI_OK == status)
        {
            if (IsFullLoggingEnabled())
            {
                OsConfigLogInfo(@MODULE_NAME@Log::Get(), "MmiSet(%p, %s, %s, %.*s, %d) returned %d", clientSession, componentName, objectName, payloadSizeBytes, payload, payloadSizeBytes, status);
            }
        }
        else
        {
            if (IsFullLoggingEnabled())
            {
                OsConfigLogError(@MODULE_NAME@Log::Get(), "MmiSet(%p, %s, %s, %.*s, %d) returned %d", clientSession, componentName, objectName, payloadSizeBytes, payload, payloadSizeBytes, status);
            }
            else
            {
                OsConfigLogError(@MODULE_NAME@Log::Get(), "MmiSet(%p, %s, %s, -, %d) returned %d", clientSession, componentName, objectName, payloadSizeBytes, status);
            }
        }
    }};

    if (nullptr == clientSession)
    {
        OsConfigLogError(@MODULE_NAME@Log::Get(), "MmiSet called with null clientSession");
        status = EINVAL;
    }
    else
    {
        session = reinterpret_cast<@MODULE_NAME@*>(clientSession);

        try
        {
            status = session->Set(componentName, objectName, payload, payloadSizeBytes);
        }
        catch (const std::exception& e)
        {
            OsConfigLogError(@MODULE_NAME@Log::Get(), "MmiSet(%p, %s, %s, %.*s, %d) failed with exception: %s", clientSession, componentName, objectName, payloadSizeBytes, payload, payloadSizeBytes, e.what());
            status = -1;
        }
        catch (...)
        {
            OsConfigLogError(@MODULE_NAME@Log::Get(), "MmiSet(%p, %s, %s, %.*s, %d) failed with unknown exception", clientSession, componentName, objectName, payloadSizeBytes, payload, payloadSizeBytes);
            status = -1;
        }
    }

    return status;
}

int MmiGet(
    MMI_HANDLE clientSession,
    const char* componentName,
    const char* objectName,
    MMI_JSON_STRING* payload,
    int* payloadSizeBytes)
{
    int status = MMI_OK;
    @MODULE_NAME@* session = nullptr;

    ScopeGuard sg{[&]()
    {
        if (IsFullLoggingEnabled())
        {
            if (MMI_OK == status)
            {
                OsConfigLogInfo(@MODULE_NAME@Log::Get(), "MmiGet(%p, %s, %s, %.*s, %d) returned %d", clientSession, componentName, objectName, *payloadSizeBytes, *payload, *payloadSizeBytes, status);
            }
            else
            {
                OsConfigLogError(@MODULE_NAME@Log::Get(), "MmiGet(%p, %s, %s, %.*s, %d) returned %d", clientSession, componentName, objectName, *payloadSizeBytes, *payload, *payloadSizeBytes, status);
            }
        }
    }};

    if (nullptr == clientSession)
    {
        OsConfigLogError(@MODULE_NAME@Log::Get(), "MmiGet called with null clientSession");
        status = EINVAL;
    }
    else
    {
        session = reinterpret_cast<@MODULE_NAME@*>(clientSession);

        try
        {
            status = session->Get(componentName, objectName, payload, payloadSizeBytes);
        }
        catch (const std::exception& e)
        {
            OsConfigLogError(@MODULE_NAME@Log::Get(), "MmiGet(%p, %s, %s, %.*s, %d) failed with exception: %s", clientSession, componentName, objectName, *payloadSizeBytes, *payload, *payloadSizeBytes, e.what());
            status = -1;
        }
        catch (...)
        {
            OsConfigLogError(@MODULE_NAME@Log::Get(), "MmiGet(%p, %s, %s, %.*s, %d) failed with unknown exception", clientSession, componentName, objectName, *payloadSizeBytes, *payload, *payloadSizeBytes);
            status = -1;
        }
    }

    return status;
}

void MmiFree(MMI_JSON_STRING payload)
{
    if (nullptr != payload)
    {
        delete[] payload;
    }
}